{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":618141,"sourceType":"datasetVersion","datasetId":302641}],"dockerImageVersionId":29867,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"<H2>Customer Lifetime prediction value </H2>","metadata":{}},{"cell_type":"markdown","source":"We invest in customers (acquisition costs, offline ads, promotions, discounts & etc.) to generate revenue and be profitable. Naturally, these actions make some customers super valuable in terms of lifetime value but there are always some customers who pull down the profitability. We need to identify these behavior patterns, segment customers and act accordingly.\nCalculating Lifetime Value is the easy part. First we need to select a time window. It can be anything like 3, 6, 12, 24 months. By the equation below, we can have Lifetime Value for each customer in that specific time window:\n\n**Lifetime Value: Total Gross Revenue - Total Cost**\n\nThis equation now gives us the historical lifetime value. If we see some customers having very high negative lifetime value historically, it could be too late to take an action. \n\nWe are going to build a simple machine learning model that predicts our customers lifetime value.\n\n<h3>Lifetime Value Prediction</h3>\n\n* Define an appropriate time frame for Customer Lifetime Value calculation\n* Identify the features we are going to use to predict future and create them\n* Calculate lifetime value (LTV) for training the machine learning model\n* Build and run the machine learning model\n* Check if the model is useful\n\n**1. How to decide the timeframe**\n\nDeciding the time frame really depends on your industry, business model, strategy and more. For some industries, 1 year is a very long period while for the others it is very short. In our example, we will go ahead with 6 months.\n\n**2. Identifying the features for prediction**\n\nRFM scores for each customer ID (which we calculated in the previous article) are the perfect candidates for feature set. To implement it correctly, we need to split our dataset. We will take 3 months of data, calculate RFM and use it for predicting next 6 months. So we need to create two dataframes first and append RFM scores to them.\n\nAfter the first two steps, it is easy to calculate CLTV and train and test the model.\n\n- <a href='#1'>1. Identifying the features</a>  \n- <a href='#2'>2. Importing necessary libraries and packages and reading files</a>\n   - <a href='#2.1'>2.1 Feature Engineering</a>\n- <a href='#3'>3. Recency</a>\n   - <a href='#3.1'>3.1 Assigning a recency score </a>\n   - <a href='#3.2'>3.2 Ordering clusters</a>\n- <a href='#4'> 4. Frequency</a>\n   - <a href='#4.1'>4.1 Frequency clusters</a>\n- <a href='#5'>5. Revenue</a>\n   - <a href='#5.1'>5.1 Revenue clusters</a>\n- <a href='#6'>6. Overall score based on RFM Clustering</a>  \n- <a href='#7'>7. Customer Lifetime Value </a>\n   - <a href='#7.1'>7.1 Feature engineering</a>\n- <a href='#8'>8. Machine Learning Model for Customer Lifetime Value Prediction</a>  \n- <a href='#9'>9. Final Clusters for Customer Lifetime Value</a>  \n","metadata":{}},{"cell_type":"markdown","source":"<a href=1><h2> 1. Identifying the features </h2></a>","metadata":{}},{"cell_type":"markdown","source":"<h3> 2. Importing relevant packages and libraries </h3>","metadata":{}},{"cell_type":"code","source":"\n#import libraries\nfrom __future__ import division\n\nfrom datetime import datetime, timedelta,date\nimport pandas as pd\n%matplotlib inline\nfrom sklearn.metrics import classification_report,confusion_matrix\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.cluster import KMeans\n\n\nimport plotly as py\nimport plotly.offline as pyoff\nimport plotly.graph_objs as go\n\nimport xgboost as xgb\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\n\nimport xgboost as xgb\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:12.104084Z","iopub.execute_input":"2024-12-01T09:45:12.104394Z","iopub.status.idle":"2024-12-01T09:45:16.240043Z","shell.execute_reply.started":"2024-12-01T09:45:12.104365Z","shell.execute_reply":"2024-12-01T09:45:16.239206Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Read data\ntx_data = pd.read_csv('../input/customer_segmentation/customer_segmentation.csv', encoding='cp1252')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:16.243979Z","iopub.execute_input":"2024-12-01T09:45:16.2461Z","iopub.status.idle":"2024-12-01T09:45:17.780726Z","shell.execute_reply.started":"2024-12-01T09:45:16.246061Z","shell.execute_reply":"2024-12-01T09:45:17.779974Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#initate plotly\npyoff.init_notebook_mode()\n\n#read data from csv and redo the data work we done before\ntx_data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:17.781664Z","iopub.execute_input":"2024-12-01T09:45:17.781904Z","iopub.status.idle":"2024-12-01T09:45:17.896343Z","shell.execute_reply.started":"2024-12-01T09:45:17.781872Z","shell.execute_reply":"2024-12-01T09:45:17.89559Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"We have all the crucial information we need:\nCustomer ID\nUnit Price\nQuantity\nInvoice Date\nRevenue = Active Customer Count * Order Count * Average Revenue per Order\n","metadata":{}},{"cell_type":"markdown","source":"<a href=2.1><h3>2.1 Feature Engineering </h3></a>","metadata":{}},{"cell_type":"code","source":"#converting the type of Invoice Date Field from string to datetime.\ntx_data['InvoiceDate'] = pd.to_datetime(tx_data['InvoiceDate'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:17.899405Z","iopub.execute_input":"2024-12-01T09:45:17.899649Z","iopub.status.idle":"2024-12-01T09:45:20.432701Z","shell.execute_reply.started":"2024-12-01T09:45:17.899623Z","shell.execute_reply":"2024-12-01T09:45:20.431947Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#creating YearMonth field for the ease of reporting and visualization\ntx_data['InvoiceYearMonth'] = tx_data['InvoiceDate'].map(lambda date: 100*date.year + date.month)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:20.438227Z","iopub.execute_input":"2024-12-01T09:45:20.440155Z","iopub.status.idle":"2024-12-01T09:45:24.473483Z","shell.execute_reply.started":"2024-12-01T09:45:20.440113Z","shell.execute_reply":"2024-12-01T09:45:24.472717Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"tx_data.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:24.47704Z","iopub.execute_input":"2024-12-01T09:45:24.47981Z","iopub.status.idle":"2024-12-01T09:45:24.597088Z","shell.execute_reply.started":"2024-12-01T09:45:24.479759Z","shell.execute_reply":"2024-12-01T09:45:24.596344Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"tx_data['Country'].value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:24.600406Z","iopub.execute_input":"2024-12-01T09:45:24.600669Z","iopub.status.idle":"2024-12-01T09:45:24.674254Z","shell.execute_reply.started":"2024-12-01T09:45:24.60064Z","shell.execute_reply":"2024-12-01T09:45:24.673506Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Starting from this part, we will be focusing on UK data only (which has the most records). We can get the monthly active customers by counting unique CustomerIDs. The same analysis can be carried out for customers of other countries as well.","metadata":{}},{"cell_type":"code","source":"#we will be using only UK data\ntx_uk = tx_data.query(\"Country=='United Kingdom'\").reset_index(drop=True)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:24.675392Z","iopub.execute_input":"2024-12-01T09:45:24.675625Z","iopub.status.idle":"2024-12-01T09:45:24.79722Z","shell.execute_reply.started":"2024-12-01T09:45:24.675584Z","shell.execute_reply":"2024-12-01T09:45:24.796279Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Segmentation Techniques**\n\nYou can do many different segmentations according to what you are trying to achieve. If you want to increase retention rate, you can do a segmentation based on churn probability and take actions. But there are very common and useful segmentation methods as well. Now we are going to implement one of them to our business: RFM.\nRFM stands for Recency - Frequency - Monetary Value. Theoretically we will have segments like below:\n\n* Low Value: Customers who are less active than others, not very frequent buyer/visitor and generates very low - zero - maybe negative revenue.\n* Mid Value: In the middle of everything. Often using our platform (but not as much as our High Values), fairly frequent and generates moderate revenue.\n* High Value: The group we don’t want to lose. High Revenue, Frequency and low Inactivity.\n\nAs the methodology, we need to calculate Recency, Frequency and Monetary Value (we will call it Revenue from now on) and apply unsupervised machine learning to identify different groups (clusters) for each. Let’s jump into coding and see how to do RFM Clustering.\n\n","metadata":{}},{"cell_type":"markdown","source":"<h3><a href=3>3. Recency</a></h3>\n\nTo calculate recency, we need to find out most recent purchase date of each customer and see how many days they are inactive for. After having no. of inactive days for each customer, we will apply K-means* clustering to assign customers a recency score.\n\nLets go ahead and calculate that.","metadata":{}},{"cell_type":"code","source":"#create a generic user dataframe to keep CustomerID and new segmentation scores\ntx_user = pd.DataFrame(tx_data['CustomerID'].unique())\ntx_user.columns = ['CustomerID']\ntx_user.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:24.800741Z","iopub.execute_input":"2024-12-01T09:45:24.803138Z","iopub.status.idle":"2024-12-01T09:45:24.825365Z","shell.execute_reply.started":"2024-12-01T09:45:24.80309Z","shell.execute_reply":"2024-12-01T09:45:24.824588Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"tx_uk.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:24.827851Z","iopub.execute_input":"2024-12-01T09:45:24.82809Z","iopub.status.idle":"2024-12-01T09:45:24.854248Z","shell.execute_reply.started":"2024-12-01T09:45:24.828065Z","shell.execute_reply":"2024-12-01T09:45:24.853477Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Since we are calculating recency, we need to know when last the person bought something. Let us calculate the last date of transaction for a person.","metadata":{}},{"cell_type":"code","source":"#get the max purchase date for each customer and create a dataframe with it\ntx_max_purchase = tx_uk.groupby('CustomerID').InvoiceDate.max().reset_index()\ntx_max_purchase.columns = ['CustomerID','MaxPurchaseDate']\ntx_max_purchase.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:24.858465Z","iopub.execute_input":"2024-12-01T09:45:24.858754Z","iopub.status.idle":"2024-12-01T09:45:24.890742Z","shell.execute_reply.started":"2024-12-01T09:45:24.858717Z","shell.execute_reply":"2024-12-01T09:45:24.890051Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Compare the last transaction of the dataset with last transaction dates of the individual customer IDs.\ntx_max_purchase['Recency'] = (tx_max_purchase['MaxPurchaseDate'].max() - tx_max_purchase['MaxPurchaseDate']).dt.days\ntx_max_purchase.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:24.893125Z","iopub.execute_input":"2024-12-01T09:45:24.893363Z","iopub.status.idle":"2024-12-01T09:45:24.918965Z","shell.execute_reply.started":"2024-12-01T09:45:24.893338Z","shell.execute_reply":"2024-12-01T09:45:24.918184Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#merge this dataframe to our new user dataframe\ntx_user = pd.merge(tx_user, tx_max_purchase[['CustomerID','Recency']], on='CustomerID')\ntx_user.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:24.921064Z","iopub.execute_input":"2024-12-01T09:45:24.921291Z","iopub.status.idle":"2024-12-01T09:45:24.952423Z","shell.execute_reply.started":"2024-12-01T09:45:24.921266Z","shell.execute_reply":"2024-12-01T09:45:24.951721Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<a href=3.1><h3> 3.1 Assigning a recency score</h3></a> \n\nWe are going to apply K-means clustering to assign a recency score. But we should tell how many clusters we need to K-means algorithm. To find it out, we will apply Elbow Method. Elbow Method simply tells the optimal cluster number for optimal inertia. Code snippet and Inertia graph are as follows:","metadata":{}},{"cell_type":"code","source":"from sklearn.cluster import KMeans\n\nsse={} # error\ntx_recency = tx_user[['Recency']]\nfor k in range(1, 10):\n    kmeans = KMeans(n_clusters=k, max_iter=1000).fit(tx_recency)\n    tx_recency[\"clusters\"] = kmeans.labels_  #cluster names corresponding to recency values \n    sse[k] = kmeans.inertia_ #sse corresponding to clusters\nplt.figure()\nplt.plot(list(sse.keys()), list(sse.values()))\nplt.xlabel(\"Number of cluster\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:24.956408Z","iopub.execute_input":"2024-12-01T09:45:24.95667Z","iopub.status.idle":"2024-12-01T09:45:25.798971Z","shell.execute_reply.started":"2024-12-01T09:45:24.956641Z","shell.execute_reply":"2024-12-01T09:45:25.798197Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Here it looks like 3 is the optimal one. Based on business requirements, we can go ahead with less or more clusters. We will be selecting 4 for this example","metadata":{}},{"cell_type":"code","source":"#build 4 clusters for recency and add it to dataframe\nkmeans = KMeans(n_clusters=4)\ntx_user['RecencyCluster'] = kmeans.fit_predict(tx_user[['Recency']])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:25.803077Z","iopub.execute_input":"2024-12-01T09:45:25.803351Z","iopub.status.idle":"2024-12-01T09:45:25.898355Z","shell.execute_reply.started":"2024-12-01T09:45:25.803323Z","shell.execute_reply":"2024-12-01T09:45:25.897551Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"tx_user.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:25.90255Z","iopub.execute_input":"2024-12-01T09:45:25.902838Z","iopub.status.idle":"2024-12-01T09:45:25.920185Z","shell.execute_reply.started":"2024-12-01T09:45:25.902808Z","shell.execute_reply":"2024-12-01T09:45:25.919063Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"tx_user.groupby('RecencyCluster')['Recency'].describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:25.921124Z","iopub.execute_input":"2024-12-01T09:45:25.921341Z","iopub.status.idle":"2024-12-01T09:45:25.960631Z","shell.execute_reply.started":"2024-12-01T09:45:25.921317Z","shell.execute_reply":"2024-12-01T09:45:25.959932Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<a href=3.2><h3>3.2 Ordering clusters</a></h3>\n\nWe have a cluster corresponding to each customerID. But each cluster is randomly assigned. Cluster 2 is not better than cluster 1 for e.g. and so on. We want to give clusters according to most recent transactions.\n\nWe will first find the mean of recency value corresponding to each cluster. Then we will sort these values. Let's say cluster 3 has the most recent transactions mean value. From the above table we see that cluster 1(mean recency 304) > cluster 2 > cluster 3 > cluster 0. That means that cluster 1 is most inactive and cluster 0 is most recent. We will give indices to these clusters as 0,1,2,3. So cluster 1 becomes cluster 0, cluster 2 becomes cluster 1, cluster 3 becomes cluster 2 and so on. Now we will drop the original cluster numbers and replace them with 0,1,2,3. Code is below.","metadata":{}},{"cell_type":"code","source":"#function for ordering cluster numbers\ndef order_cluster(cluster_field_name, target_field_name,df,ascending):\n    new_cluster_field_name = 'new_' + cluster_field_name\n    df_new = df.groupby(cluster_field_name)[target_field_name].mean().reset_index()\n    df_new = df_new.sort_values(by=target_field_name,ascending=ascending).reset_index(drop=True)\n    df_new['index'] = df_new.index\n    df_final = pd.merge(df,df_new[[cluster_field_name,'index']], on=cluster_field_name)\n    df_final = df_final.drop([cluster_field_name],axis=1)\n    df_final = df_final.rename(columns={\"index\":cluster_field_name})\n    return df_final\n\ntx_user = order_cluster('RecencyCluster', 'Recency',tx_user,False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:25.963487Z","iopub.execute_input":"2024-12-01T09:45:25.963733Z","iopub.status.idle":"2024-12-01T09:45:25.98905Z","shell.execute_reply.started":"2024-12-01T09:45:25.963707Z","shell.execute_reply":"2024-12-01T09:45:25.988262Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"tx_user.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:25.991794Z","iopub.execute_input":"2024-12-01T09:45:25.99204Z","iopub.status.idle":"2024-12-01T09:45:26.010325Z","shell.execute_reply.started":"2024-12-01T09:45:25.992015Z","shell.execute_reply":"2024-12-01T09:45:26.009661Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"tx_user.groupby('RecencyCluster')['Recency'].describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:26.014713Z","iopub.execute_input":"2024-12-01T09:45:26.015875Z","iopub.status.idle":"2024-12-01T09:45:26.050901Z","shell.execute_reply.started":"2024-12-01T09:45:26.015833Z","shell.execute_reply":"2024-12-01T09:45:26.049991Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Great! cluster 1 earlier is now cluster0, cluster 2 earlier is now cluster 1 and so on. The clusters are arranged according to inactiviuty. Cluster 0 now is most inactive, cluster 3 is most active. ","metadata":{}},{"cell_type":"markdown","source":"<h3><a href=4>4. Frequency </a></h3>\n\nTo create frequency clusters, we need to find total number orders for each customer. First calculate this and see how frequency look like in our customer database","metadata":{}},{"cell_type":"code","source":"#get order counts for each user and create a dataframe with it\ntx_frequency = tx_uk.groupby('CustomerID').InvoiceDate.count().reset_index()\ntx_frequency.columns = ['CustomerID','Frequency']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:26.055211Z","iopub.execute_input":"2024-12-01T09:45:26.055466Z","iopub.status.idle":"2024-12-01T09:45:26.076594Z","shell.execute_reply.started":"2024-12-01T09:45:26.05544Z","shell.execute_reply":"2024-12-01T09:45:26.07578Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"tx_frequency.head() #how many orders does a customer have","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:26.080459Z","iopub.execute_input":"2024-12-01T09:45:26.080725Z","iopub.status.idle":"2024-12-01T09:45:26.096741Z","shell.execute_reply.started":"2024-12-01T09:45:26.080698Z","shell.execute_reply":"2024-12-01T09:45:26.095749Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#add this data to our main dataframe\ntx_user = pd.merge(tx_user, tx_frequency, on='CustomerID')\n\ntx_user.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:26.09872Z","iopub.execute_input":"2024-12-01T09:45:26.098947Z","iopub.status.idle":"2024-12-01T09:45:26.123692Z","shell.execute_reply.started":"2024-12-01T09:45:26.098923Z","shell.execute_reply":"2024-12-01T09:45:26.12301Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<a href=4.1><h3>4.1 Frequency clusters</h3></a>","metadata":{}},{"cell_type":"markdown","source":"Determine the right number of clusters for K-Means by elbow method","metadata":{}},{"cell_type":"code","source":"from sklearn.cluster import KMeans\n\nsse={} # error\ntx_recency = tx_user[['Frequency']]\nfor k in range(1, 10):\n    kmeans = KMeans(n_clusters=k, max_iter=1000).fit(tx_recency)\n    tx_recency[\"clusters\"] = kmeans.labels_  #cluster names corresponding to recency values \n    sse[k] = kmeans.inertia_ #sse corresponding to clusters\nplt.figure()\nplt.plot(list(sse.keys()), list(sse.values()))\nplt.xlabel(\"Number of cluster\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:26.127692Z","iopub.execute_input":"2024-12-01T09:45:26.127947Z","iopub.status.idle":"2024-12-01T09:45:26.973033Z","shell.execute_reply.started":"2024-12-01T09:45:26.127921Z","shell.execute_reply":"2024-12-01T09:45:26.972353Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"By Elbow method, clusters number should be 4 as after 4, the graph goes down.","metadata":{}},{"cell_type":"code","source":"# Applying k-Means\nkmeans=KMeans(n_clusters=4)\ntx_user['FrequencyCluster']=kmeans.fit_predict(tx_user[['Frequency']])\n\n#order the frequency cluster\ntx_user = order_cluster('FrequencyCluster', 'Frequency', tx_user, True )\ntx_user.groupby('FrequencyCluster')['Frequency'].describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:26.976781Z","iopub.execute_input":"2024-12-01T09:45:26.978706Z","iopub.status.idle":"2024-12-01T09:45:27.100519Z","shell.execute_reply.started":"2024-12-01T09:45:26.978667Z","shell.execute_reply":"2024-12-01T09:45:27.099857Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Clsuter with max frequency is cluster 3, least frequency cluster is cluster 0.","metadata":{}},{"cell_type":"markdown","source":"<a href=5><h3>5. Revenue</h3></a>\n\nLet’s see how our customer database looks like when we cluster them based on revenue. We will calculate revenue for each customer, plot a histogram and apply the same clustering method.","metadata":{}},{"cell_type":"code","source":"#calculate revenue for each customer\ntx_uk['Revenue'] = tx_uk['UnitPrice'] * tx_uk['Quantity']\ntx_revenue = tx_uk.groupby('CustomerID').Revenue.sum().reset_index()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:27.10181Z","iopub.execute_input":"2024-12-01T09:45:27.10204Z","iopub.status.idle":"2024-12-01T09:45:27.137626Z","shell.execute_reply.started":"2024-12-01T09:45:27.102015Z","shell.execute_reply":"2024-12-01T09:45:27.13685Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"tx_revenue.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:27.138723Z","iopub.execute_input":"2024-12-01T09:45:27.138952Z","iopub.status.idle":"2024-12-01T09:45:27.15919Z","shell.execute_reply.started":"2024-12-01T09:45:27.138928Z","shell.execute_reply":"2024-12-01T09:45:27.158344Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#merge it with our main dataframe\ntx_user = pd.merge(tx_user, tx_revenue, on='CustomerID')\ntx_user.head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:27.160252Z","iopub.execute_input":"2024-12-01T09:45:27.160465Z","iopub.status.idle":"2024-12-01T09:45:27.189271Z","shell.execute_reply.started":"2024-12-01T09:45:27.160441Z","shell.execute_reply":"2024-12-01T09:45:27.188467Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"We have some customers with negative revenue as well. Let’s continue and apply k-means clustering:\n","metadata":{}},{"cell_type":"markdown","source":"**Elbow method to find out the optimum number of clusters for K-Means**","metadata":{}},{"cell_type":"code","source":"from sklearn.cluster import KMeans\n\nsse={} # error\ntx_recency = tx_user[['Revenue']]\nfor k in range(1, 10):\n    kmeans = KMeans(n_clusters=k, max_iter=1000).fit(tx_recency)\n    tx_recency[\"clusters\"] = kmeans.labels_  #cluster names corresponding to recency values \n    sse[k] = kmeans.inertia_ #sse corresponding to clusters\nplt.figure()\nplt.plot(list(sse.keys()), list(sse.values()))\nplt.xlabel(\"Number of cluster\")\nplt.show()","metadata":{"scrolled":true,"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:27.190632Z","iopub.execute_input":"2024-12-01T09:45:27.190878Z","iopub.status.idle":"2024-12-01T09:45:27.927941Z","shell.execute_reply.started":"2024-12-01T09:45:27.190853Z","shell.execute_reply":"2024-12-01T09:45:27.927032Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"From elbow's method, we find that clusters can be 3 or 4. Lets take 4 as the number of clusters","metadata":{}},{"cell_type":"markdown","source":"<a href=5.1><h3> 5.1. Revenue clusters </h3></a>","metadata":{}},{"cell_type":"code","source":"#apply clustering\nkmeans = KMeans(n_clusters=4)\ntx_user['RevenueCluster'] = kmeans.fit_predict(tx_user[['Revenue']])\n\n#order the cluster numbers\ntx_user = order_cluster('RevenueCluster', 'Revenue',tx_user,True)\n\n#show details of the dataframe\ntx_user.groupby('RevenueCluster')['Revenue'].describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:27.929108Z","iopub.execute_input":"2024-12-01T09:45:27.929322Z","iopub.status.idle":"2024-12-01T09:45:28.032283Z","shell.execute_reply.started":"2024-12-01T09:45:27.929299Z","shell.execute_reply":"2024-12-01T09:45:28.031579Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Cluster 3 has max revenue, cluster 0 has lowest revenue","metadata":{}},{"cell_type":"markdown","source":"<a href=6><h3>6. Overall Score based on RFM Clsutering</h3></a>\n\nWe have scores (cluster numbers) for recency, frequency & revenue. Let’s create an overall score out of them\n","metadata":{}},{"cell_type":"code","source":"#calculate overall score and use mean() to see details\ntx_user['OverallScore'] = tx_user['RecencyCluster'] + tx_user['FrequencyCluster'] + tx_user['RevenueCluster']\ntx_user.groupby('OverallScore')['Recency','Frequency','Revenue'].mean()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:28.03611Z","iopub.execute_input":"2024-12-01T09:45:28.036351Z","iopub.status.idle":"2024-12-01T09:45:28.060616Z","shell.execute_reply.started":"2024-12-01T09:45:28.036326Z","shell.execute_reply":"2024-12-01T09:45:28.059843Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Score 8 is our best customer, score 0 is our worst  customer.","metadata":{}},{"cell_type":"code","source":"tx_user['Segment'] = 'Low-Value'\ntx_user.loc[tx_user['OverallScore']>2,'Segment'] = 'Mid-Value' \ntx_user.loc[tx_user['OverallScore']>4,'Segment'] = 'High-Value' ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:28.067745Z","iopub.execute_input":"2024-12-01T09:45:28.069837Z","iopub.status.idle":"2024-12-01T09:45:28.083909Z","shell.execute_reply.started":"2024-12-01T09:45:28.069778Z","shell.execute_reply":"2024-12-01T09:45:28.082973Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"tx_user","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:28.085004Z","iopub.execute_input":"2024-12-01T09:45:28.085304Z","iopub.status.idle":"2024-12-01T09:45:28.11613Z","shell.execute_reply.started":"2024-12-01T09:45:28.085275Z","shell.execute_reply":"2024-12-01T09:45:28.115431Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<a href=7><h3> 7. Customer Lifetime Value</a></h3>","metadata":{}},{"cell_type":"markdown","source":"Since our feature set is ready, let’s calculate 6 months LTV for each customer which we are going to use for training our model.\n\n**Lifetime Value: Total Gross Revenue - Total Cost**\n\nThere is no cost specified in the dataset. That’s why Revenue becomes our LTV directly.\n","metadata":{}},{"cell_type":"code","source":"tx_uk.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:28.119905Z","iopub.execute_input":"2024-12-01T09:45:28.120146Z","iopub.status.idle":"2024-12-01T09:45:28.14309Z","shell.execute_reply.started":"2024-12-01T09:45:28.12012Z","shell.execute_reply":"2024-12-01T09:45:28.142345Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"tx_uk['InvoiceDate'].describe()","metadata":{"scrolled":true,"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:28.145072Z","iopub.execute_input":"2024-12-01T09:45:28.145287Z","iopub.status.idle":"2024-12-01T09:45:28.177122Z","shell.execute_reply.started":"2024-12-01T09:45:28.145262Z","shell.execute_reply":"2024-12-01T09:45:28.176392Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"We see that customers are active from 1 December 2010. Let us consider customers from March onwards (so that they are not new customers). We shall divide them into 2 subgroups. One will be where timeframe of analysing is 3 months, another will be timeframe of 6 months.","metadata":{}},{"cell_type":"code","source":"tx_3m = tx_uk[(tx_uk.InvoiceDate < date(2011,6,1)) & (tx_uk.InvoiceDate >= date(2011,3,1))].reset_index(drop=True) #3 months time\ntx_6m = tx_uk[(tx_uk.InvoiceDate >= date(2011,6,1)) & (tx_uk.InvoiceDate < date(2011,12,1))].reset_index(drop=True) # 6 months time","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:28.178044Z","iopub.execute_input":"2024-12-01T09:45:28.178256Z","iopub.status.idle":"2024-12-01T09:45:28.265427Z","shell.execute_reply.started":"2024-12-01T09:45:28.178232Z","shell.execute_reply":"2024-12-01T09:45:28.264649Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#calculate revenue and create a new dataframe for it\ntx_6m['Revenue'] = tx_6m['UnitPrice'] * tx_6m['Quantity']\ntx_user_6m = tx_6m.groupby('CustomerID')['Revenue'].sum().reset_index()\ntx_user_6m.columns = ['CustomerID','m6_Revenue']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:28.268396Z","iopub.execute_input":"2024-12-01T09:45:28.268645Z","iopub.status.idle":"2024-12-01T09:45:28.290063Z","shell.execute_reply.started":"2024-12-01T09:45:28.268617Z","shell.execute_reply":"2024-12-01T09:45:28.289321Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"tx_user_6m.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:28.294423Z","iopub.execute_input":"2024-12-01T09:45:28.295564Z","iopub.status.idle":"2024-12-01T09:45:28.313114Z","shell.execute_reply.started":"2024-12-01T09:45:28.295523Z","shell.execute_reply":"2024-12-01T09:45:28.312273Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#plot LTV histogram\nplot_data = [\n    go.Histogram(\n        x=tx_user_6m['m6_Revenue']\n    )\n]\n\nplot_layout = go.Layout(\n        title='6m Revenue'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:50:20.066297Z","iopub.execute_input":"2024-12-01T09:50:20.066725Z","iopub.status.idle":"2024-12-01T09:50:20.428482Z","shell.execute_reply.started":"2024-12-01T09:50:20.06667Z","shell.execute_reply":"2024-12-01T09:50:20.427717Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Histogram clearly shows we have customers with negative LTV. We have some outliers too. Filtering out the outliers makes sense to have a proper machine learning model.","metadata":{}},{"cell_type":"markdown","source":"Ok, next step. We will merge our 3 months and tx_uk and also merge 6 months dataframe and tx_uk to see correlations between LTV and the feature set we have.","metadata":{}},{"cell_type":"code","source":"tx_user.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:30.057454Z","iopub.execute_input":"2024-12-01T09:45:30.057692Z","iopub.status.idle":"2024-12-01T09:45:30.088819Z","shell.execute_reply.started":"2024-12-01T09:45:30.057665Z","shell.execute_reply":"2024-12-01T09:45:30.08812Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"tx_uk.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:30.089825Z","iopub.execute_input":"2024-12-01T09:45:30.090093Z","iopub.status.idle":"2024-12-01T09:45:30.117833Z","shell.execute_reply.started":"2024-12-01T09:45:30.090065Z","shell.execute_reply":"2024-12-01T09:45:30.117043Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"tx_merge = pd.merge(tx_user, tx_user_6m, on='CustomerID', how='left') #Only people who are in the timeline of tx_user_6m","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:30.120424Z","iopub.execute_input":"2024-12-01T09:45:30.120693Z","iopub.status.idle":"2024-12-01T09:45:30.139895Z","shell.execute_reply.started":"2024-12-01T09:45:30.120665Z","shell.execute_reply":"2024-12-01T09:45:30.139088Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"tx_merge = tx_merge.fillna(0)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:30.144379Z","iopub.execute_input":"2024-12-01T09:45:30.144651Z","iopub.status.idle":"2024-12-01T09:45:30.154587Z","shell.execute_reply.started":"2024-12-01T09:45:30.144623Z","shell.execute_reply":"2024-12-01T09:45:30.153728Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"tx_graph = tx_merge.query(\"m6_Revenue < 50000\") #because max values are ending at 50,000 as seen in graph above\n\nplot_data = [\n    go.Scatter(\n        x=tx_graph.query(\"Segment == 'Low-Value'\")['OverallScore'],\n        y=tx_graph.query(\"Segment == 'Low-Value'\")['m6_Revenue'],\n        mode='markers',\n        name='Low',\n        marker= dict(size= 7,\n            line= dict(width=1),\n            color= 'blue',\n            opacity= 0.8\n           )\n    ),\n        go.Scatter(\n        x=tx_graph.query(\"Segment == 'Mid-Value'\")['OverallScore'],\n        y=tx_graph.query(\"Segment == 'Mid-Value'\")['m6_Revenue'],\n        mode='markers',\n        name='Mid',\n        marker= dict(size= 9,\n            line= dict(width=1),\n            color= 'green',\n            opacity= 0.5\n           )\n    ),\n        go.Scatter(\n        x=tx_graph.query(\"Segment == 'High-Value'\")['OverallScore'],\n        y=tx_graph.query(\"Segment == 'High-Value'\")['m6_Revenue'],\n        mode='markers',\n        name='High',\n        marker= dict(size= 11,\n            line= dict(width=1),\n            color= 'red',\n            opacity= 0.9\n           )\n    ),\n]\n\nplot_layout = go.Layout(\n        yaxis= {'title': \"6m LTV\"},\n        xaxis= {'title': \"RFM Score\"},\n        title='LTV'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:30.157291Z","iopub.execute_input":"2024-12-01T09:45:30.157523Z","iopub.status.idle":"2024-12-01T09:45:30.732241Z","shell.execute_reply.started":"2024-12-01T09:45:30.157497Z","shell.execute_reply":"2024-12-01T09:45:30.73151Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"We can visualise correlation between overall RFM score and revenue. Positive correlation is quite visible here. High RFM score means high LTV.\n","metadata":{}},{"cell_type":"markdown","source":"Before building the machine learning model, we need to identify what is the type of this machine learning problem. LTV itself is a regression problem. A machine learning model can predict the $ value of the LTV. But here, we want LTV segments. Because it makes it more actionable and easy to communicate with other people. By applying K-means clustering, we can identify our existing LTV groups and build segments on top of it.\n\nConsidering business part of this analysis, we need to treat customers differently based on their predicted LTV. For this example, we will apply clustering and have 3 segments (number of segments really depends on your business dynamics and goals):\n* Low LTV\n* Mid LTV\n* High LTV\n\nWe are going to apply K-means clustering to decide segments and observe their characteristics\n","metadata":{}},{"cell_type":"code","source":"#remove outliers\ntx_merge = tx_merge[tx_merge['m6_Revenue']<tx_merge['m6_Revenue'].quantile(0.99)]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:30.73316Z","iopub.execute_input":"2024-12-01T09:45:30.733378Z","iopub.status.idle":"2024-12-01T09:45:30.750809Z","shell.execute_reply.started":"2024-12-01T09:45:30.733353Z","shell.execute_reply":"2024-12-01T09:45:30.749872Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"tx_merge.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:30.753572Z","iopub.execute_input":"2024-12-01T09:45:30.753866Z","iopub.status.idle":"2024-12-01T09:45:30.784585Z","shell.execute_reply.started":"2024-12-01T09:45:30.753834Z","shell.execute_reply":"2024-12-01T09:45:30.783805Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#creating 3 clusters\nkmeans = KMeans(n_clusters=3)\ntx_merge['LTVCluster'] = kmeans.fit_predict(tx_merge[['m6_Revenue']])\n\ntx_merge.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:30.788749Z","iopub.execute_input":"2024-12-01T09:45:30.789195Z","iopub.status.idle":"2024-12-01T09:45:30.880485Z","shell.execute_reply.started":"2024-12-01T09:45:30.789154Z","shell.execute_reply":"2024-12-01T09:45:30.879734Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#order cluster number based on LTV\ntx_merge = order_cluster('LTVCluster', 'm6_Revenue',tx_merge,True)\n\n#creatinga new cluster dataframe\ntx_cluster = tx_merge.copy()\n\n#see details of the clusters\ntx_cluster.groupby('LTVCluster')['m6_Revenue'].describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:30.882646Z","iopub.execute_input":"2024-12-01T09:45:30.882883Z","iopub.status.idle":"2024-12-01T09:45:30.930178Z","shell.execute_reply.started":"2024-12-01T09:45:30.882858Z","shell.execute_reply":"2024-12-01T09:45:30.929441Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"We have finished LTV clustering and here are the characteristics of each clusters as shown above.\n\nCluster 2 is the best with average 8.2k LTV whereas 0 is the worst with 396.","metadata":{}},{"cell_type":"markdown","source":"There are few more step before training the machine learning model:\n* Feature engineering. \n* Convert categorical columns to numerical columns.\n* We will check the correlation of features against our label, LTV clusters.\n* We will split our feature set and label (LTV) as X and y. We use X to predict y.\n* Will create Training and Test dataset. Training set will be used for building the machine learning model. We will apply our model to Test set to see its real performance.\n","metadata":{}},{"cell_type":"code","source":"tx_cluster.head()","metadata":{"scrolled":true,"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:30.934052Z","iopub.execute_input":"2024-12-01T09:45:30.934308Z","iopub.status.idle":"2024-12-01T09:45:30.956692Z","shell.execute_reply.started":"2024-12-01T09:45:30.934281Z","shell.execute_reply":"2024-12-01T09:45:30.955935Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<a href = 7.1> <h3>7.1 Feature Engineering</h3></a>","metadata":{}},{"cell_type":"code","source":"#convert categorical columns to numerical\ntx_class = pd.get_dummies(tx_cluster) #There is only one categorical variable segment\ntx_class.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:30.960871Z","iopub.execute_input":"2024-12-01T09:45:30.96113Z","iopub.status.idle":"2024-12-01T09:45:30.995735Z","shell.execute_reply.started":"2024-12-01T09:45:30.961104Z","shell.execute_reply":"2024-12-01T09:45:30.99494Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#calculate and show correlations\ncorr_matrix = tx_class.corr()\ncorr_matrix['LTVCluster'].sort_values(ascending=False)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:30.999851Z","iopub.execute_input":"2024-12-01T09:45:31.000105Z","iopub.status.idle":"2024-12-01T09:45:31.019481Z","shell.execute_reply.started":"2024-12-01T09:45:31.000079Z","shell.execute_reply":"2024-12-01T09:45:31.018818Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#create X and y, X will be feature set and y is the label - LTV\nX = tx_class.drop(['LTVCluster','m6_Revenue'],axis=1)\ny = tx_class['LTVCluster']\n\n#split training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.05, random_state=56)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:31.020342Z","iopub.execute_input":"2024-12-01T09:45:31.020538Z","iopub.status.idle":"2024-12-01T09:45:31.042677Z","shell.execute_reply.started":"2024-12-01T09:45:31.020515Z","shell.execute_reply":"2024-12-01T09:45:31.041009Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"We see that Revenue, Frequency and RFM scores will be helpful for our machine learning models from the correlation with LTVCluster.\n","metadata":{}},{"cell_type":"markdown","source":"<A href = 8><h3> 8. Machine Learning Model for Customer Lifetime Value Prediction</h3> </a>","metadata":{}},{"cell_type":"markdown","source":"Since our LTV Clusters are 3 types, high LTV, mid LTV and low LTV; we will perform multi class classification. ","metadata":{}},{"cell_type":"code","source":"#XGBoost Multiclassification Model\nltv_xgb_model = xgb.XGBClassifier(max_depth=5, learning_rate=0.1,n_jobs=-1).fit(X_train, y_train)\n\nprint('Accuracy of XGB classifier on training set: {:.2f}'\n       .format(ltv_xgb_model.score(X_train, y_train)))\nprint('Accuracy of XGB classifier on test set: {:.2f}'\n       .format(ltv_xgb_model.score(X_test[X_train.columns], y_test)))\n\ny_pred = ltv_xgb_model.predict(X_test)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:31.045891Z","iopub.execute_input":"2024-12-01T09:45:31.04626Z","iopub.status.idle":"2024-12-01T09:45:31.995222Z","shell.execute_reply.started":"2024-12-01T09:45:31.046217Z","shell.execute_reply":"2024-12-01T09:45:31.994539Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Accuracy looks good on training and test set. Let's check the precision, recall, fscore too","metadata":{}},{"cell_type":"code","source":"print(classification_report(y_test, y_pred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T09:45:31.99607Z","iopub.execute_input":"2024-12-01T09:45:31.996269Z","iopub.status.idle":"2024-12-01T09:45:32.014635Z","shell.execute_reply.started":"2024-12-01T09:45:31.996246Z","shell.execute_reply":"2024-12-01T09:45:32.013234Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<a href=9> <h2>9. Final Clusters for Customer Lifetime Value </h2></a>\n\n- **Cluster 0**: Good precision, recall, f1-score and support\n- **Cluster 1**: Needs better precision, recall and f1-score\n- **Cluster 2**: Bad precision, F1-Score needs improvement","metadata":{}},{"cell_type":"markdown","source":"If model tells us this customer belongs to cluster 0, 93 out of 100 will be correct (precision). And the model successfully identifies 95% of actual cluster 0 customers (recall).\n\nWe really need to improve the model for other clusters. For example, we barely detect 67% of Mid LTV customers. \n\n**Possible actions to improve performance**\n\n- Adding more features and improve feature engineering\n- Try different models other than XGBoost\n- Apply hyper parameter tuning to current model\n- Add more data to the model if possible\n","metadata":{}}]}